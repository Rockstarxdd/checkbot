from pyrogram import Client, filters
from pyrogram.errors import FloodWait
import asyncio, os

# тЪЩя╕П ЁЭРВЁЭРиЁЭРзЁЭРЯЁЭРвЁЭРа ЁЭРЪЁЭРлЁЭРЮЁЭРЪ - рдпрд╣рд╛рдВ рдЕрдкрдиреА рдбрд┐рдЯреЗрд▓ рдбрд╛рд▓реЛ ЁЯСЗ
api_id = 1234567  # ЁЯУЭ API ID
api_hash = "api_hash_here"  # ЁЯФС API Hash
forward_channel = -1001234567890  # ЁЯУв Channel/User ID рдЬрд╣рд╛рдВ тЬЕ рд╡рд╛рд▓реЗ рднреЗрдЬрдиреЗ рд╣реИрдВ
time_interval = 20  # тП│ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдЯрд╛рдЗрдо рдЗрдВрдЯрд░рд╡рд▓ (рд╕реЗрдХрдВрдбреНрд╕)

app = Client("session", api_id, api_hash)
sending_active = True  # тЬЕ Sending state manage karne ke liye

# тП░ рдЯрд╛рдЗрдо рдЪреЗрдВрдЬ рдХрд░рдиреЗ рдХреА рдХрдорд╛рдВрдб
@app.on_message(filters.me & filters.regex(r'^\.time (\d+)$'))
async def change_timer(_, message):
    global time_interval
    time_interval = int(message.matches[0].group(1))
    await message.reply(f"тП▒ рдЯрд╛рдЗрдо рдмрджрд▓ рджрд┐рдпрд╛ рднрд╛рдИ! рдЕрдм рд╣рд░ рдХрд╛рд░реНрдб рдХреЗ рдмреАрдЪ {time_interval}s рд▓рдЧреЗрдЧрд╛ред тЬЕ")

# ЁЯЫС рд░реЛрдХрдиреЗ рдХреА рдХрдорд╛рдВрдб
@app.on_message(filters.me & filters.command("stop", prefixes="."))
async def stop_sending(_, message):
    global sending_active
    sending_active = False
    await message.reply("тЫФ рдареАрдХ рд╣реИ рднрд╛рдИ! Sending рд░реЛрдХ рджреА рд╣реИ рдореИрдВрдиреЗред тЬЛЁЯЩВ")

# ЁЯУБ рдлрд╛рдЗрд▓ рд╕реЗ рдХрд╛рд░реНрдбреНрд╕ рднреЗрдЬрдирд╛
@app.on_message(filters.me & filters.document & filters.caption & filters.regex(r'^/'))
async def send_from_file(client, message):
    global sending_active
    sending_active = True
    command = message.caption.strip()
    file_path = await message.download()
    chat_id = message.chat.id

    with open(file_path, "r", encoding="utf-8") as file:
        cards = [line.strip() for line in file if line.strip()]

    if not cards:
        await message.reply("тЭМ рднрд╛рдИ! рдпреЗ рдлрд╝рд╛рдЗрд▓ рддреЛ рдЦрд╛рд▓реА рд╣реИред ЁЯд╖тАНтЩВя╕П")
        os.remove(file_path)
        return

    await message.reply(f"ЁЯЪА рднрд╛рдИ, `{command}` рдХрдорд╛рдВрдб рдХреЗ рд╕рд╛рде {len(cards)} рдХрд╛рд░реНрдбреНрд╕ рднреЗрдЬ рд░рд╣рд╛ рд╣реВрдВ! ЁЯГПЁЯФе рд╣рд░ {time_interval}s рдмрд╛рджред")

    for card in cards:
        if not sending_active:
            break
        text = f"{command} {card}"
        try:
            await client.send_message(chat_id, text)
        except FloodWait as e:
            await asyncio.sleep(e.value)
            await client.send_message(chat_id, text)
        await asyncio.sleep(time_interval)

    final_msg = "тЬЕ рд╕рд╛рд░реЗ рдХрд╛рд░реНрдбреНрд╕ рднреЗрдЬ рджрд┐рдП рдЧрдП рднрд╛рдИ! ЁЯОЙ" if sending_active else "ЁЯЫС рддреВрдиреЗ рднреЗрдЬрдирд╛ рд░реЛрдХ рджрд┐рдпрд╛ рдерд╛ рднрд╛рдИ! тЬЛЁЯЩВ"
    await message.reply(final_msg)
    os.remove(file_path)
    sending_active = True

# ЁЯГП рдЯреЗрдХреНрд╕реНрдЯ рд╕реЗ рдХрд╛рд░реНрдбреНрд╕ рднреЗрдЬрдирд╛ (only "/" рд╡рд╛рд▓реА рдХрдорд╛рдВрдб)
@app.on_message(filters.me & filters.text & filters.regex(r'^/'))
async def send_text_cards(client, message):
    global sending_active
    sending_active = True
    chat_id = message.chat.id
    lines = message.text.strip().split("\n")

    if len(lines) < 2:
        return

    command = lines[0].strip()
    cards = lines[1:]

    await message.reply(f"ЁЯЪА рднрд╛рдИ, `{command}` рдХреЗ рд╕рд╛рде {len(cards)} рдХрд╛рд░реНрдбреНрд╕ рднреЗрдЬ рд░рд╣рд╛ рд╣реВрдВ! ЁЯО┤ рд╣рд░ {time_interval}s рдмрд╛рджред")

    for card in cards:
        if not sending_active:
            break
        text = f"{command} {card}"
        try:
            await client.send_message(chat_id, text)
        except FloodWait as e:
            await asyncio.sleep(e.value)
            await client.send_message(chat_id, text)
        await asyncio.sleep(time_interval)

    final_msg = "тЬЕ рд╕рд╛рд░реЗ рдХрд╛рд░реНрдбреНрд╕ рднреЗрдЬ рджрд┐рдП рдЧрдП рднрд╛рдИ! ЁЯОЙ" if sending_active else "ЁЯЫС рддреВрдиреЗ рднреЗрдЬрдирд╛ рд░реЛрдХ рджрд┐рдпрд╛ рдерд╛ рднрд╛рдИ! тЬЛЁЯЩВ"
    await message.reply(final_msg)
    sending_active = True

# тЬЕ рд╡рд╛рд▓реЗ рд╣рд┐рдЯреНрд╕ рдлреЙрд░рд╡рд░реНрдб рдХрд░рдирд╛
@app.on_message(filters.incoming & filters.text & filters.regex("тЬЕ"))
async def forward_hits(client, message):
    try:
        await message.forward(forward_channel)
        print(f"ЁЯФД Forwarded: {message.text}")
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await message.forward(forward_channel)

# ЁЯЪА рд╕реНрдЯрд╛рд░реНрдЯ рдореЗрд╕реЗрдЬ
print("ЁЯдЦтЬи рддреЗрд░рд╛ рдореЙрдбрд░реНрди Userbot рддреИрдпрд╛рд░ рд╣реИ рднрд╛рдИ! ЁЯЪА")
app.run()
